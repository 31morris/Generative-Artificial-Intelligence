# Prompt you use:
1.	將 sample.csv 根據 task 分類存入字典（task_dict），確保能從相同類型的題目中選擇示例。
2.	從相同 task 的範例題目中隨機選擇 3 題，提供給模型作為 Few-Shot 示例，幫助它學習如何回答類似問題。
3.	設定 System Message，告訴模型它是該領域的專家。
4.	利用 Few-Shot Learning，讓模型先學習示例的題目與正確答案，提升它對新題目的判斷能力。
5.	設定 User Message，提供實際要測試的題目與選項，並明確要求它只能回答 A、B、C、D，確保格式正確。
6.	發送 API 請求（第一次），取得模型的初步答案。
7.	將模型的第一次回答加入對話歷史，讓它記住自己的選擇。
8.	設定第二次 User Message，將第一次回答加入對話歷史紀錄後再問一次，強調只能回答 A、B、C、D，確保格式符合需求。
9.	發送 API 請求（第二次），確認最終答案。
10. 過濾模型思考內容，確保輸出格式為 A、B、C、D。
________________________________________
# API you use:
deepseek-r1-distill-llama-70b
temperature=0（讓模型的輸出結果更穩定，減少隨機性）
________________________________________
# Your prompt strategy:
我使用 Few-Shot Learning 作為基礎，並採取兩次Prompt（請求兩次 API），提高準確率和穩定性。
1.System Message:
設定模型為該 task 的專家，強調它已經學習過許多類似題目，並要求它從 A、B、C、D 中選擇答案，避免出現解釋或多餘內容。
2.User Message
提供真正的測試題，並明確要求只回答 A、B、C、D，確保格式符合需求。
3.Assistant Message
回答正確選項，確保其符合格式。
________________________________________
# 注意事項！！！

因為總共有518題，但我一題會生成兩次API請求兩次，這樣就是會生成1036次API請求，所以此時程式會報錯，並存取資料。
我有透過程式對應此問題，報錯時會存取當時的內容，接著根據中斷題號，修改n，重新執行即可。
假設到第五題存完後報錯，要去main.py的第28行去修改n值，將n值改為5，然後再重新執行程式，它就會從第6題繼續開始，要注意如果想從第n題開始，n要等於n-1。
